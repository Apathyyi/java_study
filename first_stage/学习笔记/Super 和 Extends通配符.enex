<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export2.dtd">
<en-export export-date="20201113T073116Z" application="Evernote/Windows" version="6.x">
<note><title>Super 和 Extends通配符</title><content><![CDATA[<!DOCTYPE en-note SYSTEM 'http://xml.evernote.com/pub/enml2.dtd'><en-note><div style="font-size: 14px; margin: 0; padding: 0; width: 100%;"><p style="line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;">Extends 通配符接收子类的类型，如<br/>
Pair&lt;? extends Number&gt;接收所有泛型为number以及number子类的Pair类型<br/>
比如<br/>
public static void main(String[] args) {<br/>
Pair&lt;Integer&gt; p = new Pair&lt;&gt;(123, 456);<br/>
int n = add(p);<br/>
System.out.println(n);<br/>
}</p>
<pre style="line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;"><code style="display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;">static int add(Pair&lt;? extends Number&gt; p) {
    Number first = p.getFirst();
    Number last = p.getLast();
    return first.intValue() + last.intValue();
}
</code></pre>
<p style="line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;">class Pair&lt;T&gt; {<br/>
private T first;<br/>
private T last;<br/>
public Pair(T first, T last) {<br/>
this.first = first;<br/>
this.last = last;<br/>
}<br/>
public T getFirst() {<br/>
return first;<br/>
}<br/>
public T getLast() {<br/>
return last;<br/>
}</p>
<pre style="line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;"><code style="display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;">public void setFirst(T first) {
    this.first = first;
}
public void setLast(T last) {
    this.last = last;
}
</code></pre>
<p style="line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;">}<br/>
这样给方法传入Pair&lt;Integer&gt;类型就是正确的</p>
<p style="line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;">且我们也可以传入Pair&lt;Double&gt;类型，不过正因如此，我们只能调用Pair类的get方法，比如<br/>
Number first = p.getFirst();是正确的</p>
<pre style="line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; margin: 2px 0 8px; background-color: #f5f7f8;"><code style="display: block; overflow-x: auto; background: #1e1e1e; line-height: 160%; box-sizing: content-box; border: 0; border-radius: 0; letter-spacing: -.3px; padding: 18px; color: #f4f4f4; white-space: pre-wrap;">static int add(Pair&lt;? extends Number&gt; p) {
    Number first = p.getFirst();
    Number last = p.getLast();
    p.setFirst(new Integer(first.intValue() + 100));
    p.setLast(new Integer(last.intValue() + 100));
    return p.getFirst().intValue() + p.getFirst().intValue();
</code></pre>
<p style="line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;">p.setFirst（）是没法调用的，因为传入进去的可能是Number也可能是其子类Integer或者Double，两者都是可以的，但是显然内部使用的是new Integer方法，如果传入的是Double类型的p那就出问题了。</p>
<p style="line-height: 160%; box-sizing: content-box; margin: 10px 0; color: #333;">同理，对于super通配符，<br/>
Pair&lt;? super Integer&gt;表示，方法参数接受所有泛型类型为Integer或Integer父类的Pair类型。<br/>
extends表示类的方法只可读，不可写。super通配符则表示方法只可写，不可读。</p>
</div><center style='display:none !important;visibility:collapse !important;height:0 !important;white-space:nowrap;width:100%;overflow:hidden'>Extends%20%E9%80%9A%E9%85%8D%E7%AC%A6%E6%8E%A5%E6%94%B6%E5%AD%90%E7%B1%BB%E7%9A%84%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%A6%82%0APair%3C%3F%20extends%20Number%3E%E6%8E%A5%E6%94%B6%E6%89%80%E6%9C%89%E6%B3%9B%E5%9E%8B%E4%B8%BAnumber%E4%BB%A5%E5%8F%8Anumber%E5%AD%90%E7%B1%BB%E7%9A%84Pair%E7%B1%BB%E5%9E%8B%0A%E6%AF%94%E5%A6%82%0A%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%0A%20%20%20%20%20%20%20%20Pair%3CInteger%3E%20p%20%3D%20new%20Pair%3C%3E(123%2C%20456)%3B%0A%20%20%20%20%20%20%20%20int%20n%20%3D%20add(p)%3B%0A%20%20%20%20%20%20%20%20System.out.println(n)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20static%20int%20add(Pair%3C%3F%20extends%20Number%3E%20p)%20%7B%0A%20%20%20%20%20%20%20%20Number%20first%20%3D%20p.getFirst()%3B%0A%20%20%20%20%20%20%20%20Number%20last%20%3D%20p.getLast()%3B%0A%20%20%20%20%20%20%20%20return%20first.intValue()%20%2B%20last.intValue()%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20%0Aclass%20Pair%3CT%3E%20%7B%0A%20%20%20%20private%20T%20first%3B%0A%20%20%20%20private%20T%20last%3B%0A%20%20%20%20public%20Pair(T%20first%2C%20T%20last)%20%7B%0A%20%20%20%20%20%20%20%20this.first%20%3D%20first%3B%0A%20%20%20%20%20%20%20%20this.last%20%3D%20last%3B%0A%20%20%20%20%7D%0A%20%20%20%20public%20T%20getFirst()%20%7B%0A%20%20%20%20%20%20%20%20return%20first%3B%0A%20%20%20%20%7D%0A%20%20%20%20public%20T%20getLast()%20%7B%0A%20%20%20%20%20%20%20%20return%20last%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20public%20void%20setFirst(T%20first)%20%7B%0A%20%20%20%20%20%20%20%20this.first%20%3D%20first%3B%0A%20%20%20%20%7D%0A%20%20%20%20public%20void%20setLast(T%20last)%20%7B%0A%20%20%20%20%20%20%20%20this.last%20%3D%20last%3B%0A%20%20%20%20%7D%0A%7D%0A%E8%BF%99%E6%A0%B7%E7%BB%99%E6%96%B9%E6%B3%95%E4%BC%A0%E5%85%A5Pair%3CInteger%3E%E7%B1%BB%E5%9E%8B%E5%B0%B1%E6%98%AF%E6%AD%A3%E7%A1%AE%E7%9A%84%0A%0A%E4%B8%94%E6%88%91%E4%BB%AC%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BC%A0%E5%85%A5Pair%3CDouble%3E%E7%B1%BB%E5%9E%8B%EF%BC%8C%E4%B8%8D%E8%BF%87%E6%AD%A3%E5%9B%A0%E5%A6%82%E6%AD%A4%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AA%E8%83%BD%E8%B0%83%E7%94%A8Pair%E7%B1%BB%E7%9A%84get%E6%96%B9%E6%B3%95%EF%BC%8C%E6%AF%94%E5%A6%82%0ANumber%20first%20%3D%20p.getFirst()%3B%E6%98%AF%E6%AD%A3%E7%A1%AE%E7%9A%84%0A%0A%20%20%20%20static%20int%20add(Pair%3C%3F%20extends%20Number%3E%20p)%20%7B%0A%20%20%20%20%20%20%20%20Number%20first%20%3D%20p.getFirst()%3B%0A%20%20%20%20%20%20%20%20Number%20last%20%3D%20p.getLast()%3B%0A%20%20%20%20%20%20%20%20p.setFirst(new%20Integer(first.intValue()%20%2B%20100))%3B%0A%20%20%20%20%20%20%20%20p.setLast(new%20Integer(last.intValue()%20%2B%20100))%3B%0A%20%20%20%20%20%20%20%20return%20p.getFirst().intValue()%20%2B%20p.getFirst().intValue()%3B%0A%20%20%20%20%20%20%20%20%0Ap.setFirst%EF%BC%88%EF%BC%89%E6%98%AF%E6%B2%A1%E6%B3%95%E8%B0%83%E7%94%A8%E7%9A%84%EF%BC%8C%E5%9B%A0%E4%B8%BA%E4%BC%A0%E5%85%A5%E8%BF%9B%E5%8E%BB%E7%9A%84%E5%8F%AF%E8%83%BD%E6%98%AFNumber%E4%B9%9F%E5%8F%AF%E8%83%BD%E6%98%AF%E5%85%B6%E5%AD%90%E7%B1%BBInteger%E6%88%96%E8%80%85Double%EF%BC%8C%E4%B8%A4%E8%80%85%E9%83%BD%E6%98%AF%E5%8F%AF%E4%BB%A5%E7%9A%84%EF%BC%8C%E4%BD%86%E6%98%AF%E6%98%BE%E7%84%B6%E5%86%85%E9%83%A8%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AFnew%20Integer%E6%96%B9%E6%B3%95%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%BC%A0%E5%85%A5%E7%9A%84%E6%98%AFDouble%E7%B1%BB%E5%9E%8B%E7%9A%84p%E9%82%A3%E5%B0%B1%E5%87%BA%E9%97%AE%E9%A2%98%E4%BA%86%E3%80%82%0A%0A%0A%E5%90%8C%E7%90%86%EF%BC%8C%E5%AF%B9%E4%BA%8Esuper%E9%80%9A%E9%85%8D%E7%AC%A6%EF%BC%8C%0APair%3C%3F%20super%20Integer%3E%E8%A1%A8%E7%A4%BA%EF%BC%8C%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E6%8E%A5%E5%8F%97%E6%89%80%E6%9C%89%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E4%B8%BAInteger%E6%88%96Integer%E7%88%B6%E7%B1%BB%E7%9A%84Pair%E7%B1%BB%E5%9E%8B%E3%80%82%0Aextends%E8%A1%A8%E7%A4%BA%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95%E5%8F%AA%E5%8F%AF%E8%AF%BB%EF%BC%8C%E4%B8%8D%E5%8F%AF%E5%86%99%E3%80%82super%E9%80%9A%E9%85%8D%E7%AC%A6%E5%88%99%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95%E5%8F%AA%E5%8F%AF%E5%86%99%EF%BC%8C%E4%B8%8D%E5%8F%AF%E8%AF%BB%E3%80%82%0A</center></en-note>]]></content><created>20200320T082028Z</created><updated>20200320T083857Z</updated><note-attributes><author>覃杨炀</author><source>desktop.win</source><source-url>https://www.liaoxuefeng.com/wiki/1252599548343744/1265105899616928</source-url><source-application>yinxiang.win32</source-application><content-class>yinxiang.markdown</content-class></note-attributes></note></en-export>
